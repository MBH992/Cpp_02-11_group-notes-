텍스트 파일은 문자로만 구성되는 파일
바이너리 파일은 문자로 표현되지 않는 데이터가 기록된 파일, 적절한 응용프로그램으로 해석가능
한글 파일도 바이너리 파일,
입출력 연산자를 이용한 함수를 통해 파일에 연결해 출력하거나 입력할 수 있다. 
파일 입출력 방식에틑 텍스트, 바이너리 두가지가 존재하는데, 텍스트는 문자를 파일에 읽고 쓰기, 바이너리는 바이트 단위로 파일에 쓰고 읽기 가능
파일 모드는 파일 입출력에 대한 구체적인 작업을 지정, 파일 열 때 파일 모드 지정, 각각 ios::in, ios::out 등 다양한 방식 존재
get()을 이용해 텍스트 파일을 읽는 것도 가능한데 파일의 끝에서 읽기를 시도하면 EOF를 리턴한다. 코드 작성해 get()으로 EOF를 이용해 파일의 끝을 인지할 수 있다. 
istream의 getline(char* line, int n) 함수를 이용하거나 getline(ifstream& fin, string& line) 함수를 이용해 텍스트 파일을 라인 단위로 읽을 수 있다. 
바이너리 I/O방식은 바이너리 값을 그대로 파일에 저장하거나 버퍼에 저장하는 방식으로 ios::binary가 설정되지 않으면 디폴트가 텍스트 I/O이기 때문에 모드를 열어 모드 속성을 사용해야 한다. read()/write()로 블록 단위 파일도 입출력 가능하다.
텍스트 I/O와 바이너리 I/O는 파일의 끝을 만나게 되면 EOF를 리턴하는데 \n을 읽고 쓸때는 다르게 작동한다. 

컴파일 오류와 실행 오류가 존재하는데, 컴파일 오류는 컴파일러에서 알려주지만 실행 오류는 개발자의 논리 오류로 알아서 찾아야함 
예외 상황이 발생하면 프로그램 오동작이나 결과에 영향을 미치는 예상치 못한 상황 발생하는 것이기 때문에 예외 처리기를 통해 비정상적인 실행을 방지한다. 
try-throw-catch 방식을 통해 예외 처리가 가능한데, try 블록은 예외 발생 가능성 코드, throw는 예외 발생을 알리는 문장, catch는 예외를 처리하는 코드이다. 하나의 try에 다수의 catch 연결 가능, try에 함수 포함 가능, try 내부에 try 중첩 가능, 