템플릿과 표준 템플릿 라이브러리
중복 함수를 작성하게 되면 매개 변수만 다른 동일한 코드를 중복해 작성하게 되어 불편하다.
템플릿을 통해 중복 함수를 만들 때 수월함.
템플릿을 이용한 제네릭 함수 설정은 다음과 같음
템플릿선언, 제네릭 타입 선언, 제네릭 타입 선언
template <class T>
void myswap (T & a, T & b) {
T tmp;
tmp = a;
a = b;
b = tmp;
}
구체화: 제네릭 타입에 구체적인 타입 지정
제네릭 함수를 사용하여 구체화할 때 매개 변수 타입 지정해줘야함. 이때 매개 변수 타입이 다르면 컴파일 오류 발생
제네릭 클래스를 선언하고, 구현한 뒤 클래스에 사용

STL은 c++에서 제공하는 템플릿 라이브러리
제네릭 프로그래밍은 제네릭 함수나 제네릭 클래스를 활용하는 프로그래밍 기법
구현부에서 만들어주는 게 중요하다

STL에서 제공하는 컨테이너 클래스를 사용하려면 #include <vector>와 같이 헤더 파일을 선언해야 사용할 수 있다. 
vector 컨테이너는 가변 길이 배열을 구현한 제네릭 클래스, 인덱스는 0부터, 
각 클래스마다 연산자 함수가 구현되어 있음
push_back(), at(), 등등, 문자열 저장하는 벡터도 생성가능
irator은 반복자. 컨테이너의 원소를 가리키는 포인터, vector<int> v 같은 방식으로 생성 후 vector<int>::iterator it;로 생성, it = v.begin()은 v의 첫 원소에 대한 주소를 it에 저장하는, it++를 통해 벡터의 다음 원소를 가리킬 수도 it--를 통해 이전 원소를 가리킬 수도, it는 포인터, 벡터의 모든 원소를 접근하는 전형적인 코드 형태가 존재하는 만큼 많이 사용for문이 존재
vector와 같은 map 컨테이너, 키 값 을 쌍으로 원소로 저장. 
STL 알고리즘 함수는 ilerator와 함께 작동
auto를 통해 타입을 자동으로 선언,